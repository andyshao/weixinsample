#pragma checksum "D:\github\weixinsample\src\netcore3.0-mvc\Senparc.Weixin.Sample.NetCore3\Views\Device\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "1cda6750f09eb037a265f7be62b98ab5b27a5a58"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Device_Index), @"mvc.1.0.view", @"/Views/Device/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "D:\github\weixinsample\src\netcore3.0-mvc\Senparc.Weixin.Sample.NetCore3\Views\_ViewImports.cshtml"
using Senparc.Weixin.Sample.NetCore3;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "D:\github\weixinsample\src\netcore3.0-mvc\Senparc.Weixin.Sample.NetCore3\Views\_ViewImports.cshtml"
using Senparc.Weixin.Sample.NetCore3.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"1cda6750f09eb037a265f7be62b98ab5b27a5a58", @"/Views/Device/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"931ae162f46de7fc281b09500bbe6dbc3f933a4d", @"/Views/_ViewImports.cshtml")]
    public class Views_Device_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "1", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "2", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 2 "D:\github\weixinsample\src\netcore3.0-mvc\Senparc.Weixin.Sample.NetCore3\Views\Device\Index.cshtml"
  
    Layout = null;

#line default
#line hidden
#nullable disable
            WriteLiteral("\n<!DOCTYPE html>\n\n<html>\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1cda6750f09eb037a265f7be62b98ab5b27a5a584256", async() => {
                WriteLiteral(@"
    <meta name=""viewport"" content=""width=device-width"" />
    <title>设备对接能力测试（蓝牙）</title>
    <script src=""https://lib.sinaapp.com/js/jquery/1.10.2/jquery-1.10.2.js""></script>
    <script src=""https://res.wx.qq.com/open/js/jweixin-1.0.0.js""></script>
    <script>

        //wx.ready(function () {
        //    //初始化设备库
        //    wx.invoke('openWXDeviceLib', { 'connType': 'blue' }, function (res) {
        //        console.log('openWXDeviceLib', res);
        //        alert(res.err_msg);
        //    });
        //    //关闭设备库
        //    wx.invoke('closeWXDeviceLib', { 'connType': 'lan' }, function (res) {
        //        alert('closeWXDeviceLib', res);
        //    });

        //    //获取设备信息
        //    wx.invoke('getWXDeviceInfos', { 'connType': 'blue' }, function (res) {
        //        alert('getWXDeviceInfos', res);
        //    });
        //});
        //$('.deviceItem').click(function (deviceId) {
        //    // 发送数据给设备
        //    wx.invoke('connectWXDevice', { 'deviceId': devic");
                WriteLiteral(@"eId, 'connType': 'blue' }, function (res) {
        //        console.log('connectWXDevice', res);
        //    });
        //});

        //$('#open').click(function () {


        //});
        //$('#close').click(function () {


        //});
        //function sendCommand(state, deviceId) {
        //    var data;
        //    switch (state) {
        //        case 'open':
        //            data = 'xxx1';
        //            break;
        //        case 'close':
        //            data = 'xxx2';
        //            break;
        //        default:
        //    }
        //    alert(data);
        //    wx.invoke('sendDataToWXDevice', { 'deviceId': connectedDeviceInfo.deviceId, 'connType': 'blue', 'base64Data': data }, function (res) {
        //        console.log('sendDataToWXDevice', res);
        //        alert(res);
        //    });

        //}
        //初始化库结束
        //点击获取设备按钮的函数 开始
        $(function() {
            loadXMLDoc();
            var connectedDeviceInfo;
           ");
                WriteLiteral(@" wx.ready(function() {
                //初始化设备库
                wx.invoke('openWXDeviceLib',
                    { 'connType': 'blue' },
                    function(res) {
                        console.log('openWXDeviceLib', res);
                        my_openWXDeviceLib(res);
                    });

                //事件绑定

                wx.invoke('onWXDeviceBindStateChange',
                    function(res) {
                        mlog('微信客户端设备绑定状态改变事件:' + JSON.stringify(res));
                    });


                wx.invoke('onWXDeviceStateChange',
                    function(res) {
                        mlog('设备连接状态变化:' + JSON.stringify(res));
                    });

                wx.invoke('onWXDeviceBluetoothStateChange',
                    function(res) {
                        mlog('手机蓝牙状态改变:' + JSON.stringify(res));
                    });

            });

            $(""#connectWXDevice"").on(""click"",
                function(e) {
                    //连接设备

                   ");
                WriteLiteral(@" wx.invoke('connectWXDevice',
                        { 'connType': 'blue', 'deviceId': connectedDeviceInfo.deviceId },
                        function(res) {
                            mlog(""连接设备返回结果："" + JSON.stringify(res));
                        });
                });

            $(""#disconnectWXDevice"").on(""click"",
                function(e) {
                    //关闭设备连接
                    wx.invoke('disconnectWXDevice',
                        { 'connType': 'blue', 'deviceId': connectedDeviceInfo.deviceId },
                        function(res) {
                            mlog(""连接设备返回结果："" + JSON.stringify(res));
                        });
                });


            $(""#CallGetWXrefresh"").on(""click"",
                function(e) {
                    //获取设备信息
                    wx.invoke('getWXDeviceInfos',
                        { 'connType': 'blue' },
                        function(res) {
                            mlog(""获取设备信息返回："" + JSON.stringify(res));
                        ");
                WriteLiteral(@"    mlog(""获取设备信息："" + res.deviceInfos);
                            connectedDeviceInfo = res.deviceInfos[0];
                        });

                });

            $(""#getWXDeviceTicket"").on(""click"",
                function(e) {

                    //获取操作凭证
                    var type = $(""#type"").val();
                    alert(type);
                    wx.invoke('getWXDeviceTicket',
                        { 'deviceId': connectedDeviceInfo.deviceId, 'type': type, 'connType': 'blue' },
                        function(res) {
                            mlog(""获取操作凭证返回结果："" + JSON.stringify(res));
                        });

                });


            $('#CallCloseWXrefresh').on(""click"",
                function(e) {
                    //2. 关闭微信设备
                    wx.invoke('closeWXDeviceLib',
                        { 'connType': 'blue' },
                        function(res) {
                            console.log('closeWXDeviceLib', res);
                            mlog(""关闭设备返回："" ");
                WriteLiteral(@"+ res.err_msg);
                        });
                });
            $('#CallSendWXData').on(""click"",
                function(e) {
                    //3.发送数据给设备
                    wx.invoke('sendDataToWXDevice',
                        {
                            'deviceId': connectedDeviceInfo.deviceId,
                            'connType': 'blue',
                            'base64Data': 'aGVsbG93b3JsZA=='
                        },
                        function(res) {
                            console.log('sendDataToWXDevice', res);
                            mlog(""关闭设备返回："" + res.err_msg);
                        });
                });

            //更新设备接口
");
                WriteLiteral(@"        });

        //初始化 微信硬件jsapi库
        function loadXMLDoc() {
            var appId = jQuery(""#appId"").text();
            var timestamp = jQuery(""#timestamp"").text();
            var nonceStr = jQuery(""#nonceStr"").text();
            var signature = jQuery(""#signature"").text();
            wx.config({
                  beta: true,
                    debug: false, // 开启调试模式,调用的所有api的返回值会在客户端alert出来，若要查看传入的参数，可以在pc端打开，参数信息会通过log打出，仅在pc端时才会打印。
");
                WriteLiteral(@"                jsApiList: [
                    'openWXDeviceLib',
                    'closeWXDeviceLib',
                    'getWXDeviceInfos',
                    'getWXDeviceBindTicket',
                    'getWXDeviceUnbindTicket',
                    'startScanWXDevice',
                    'stopScanWXDevice',
                    'connectWXDevice',
                    'disconnectWXDevice',
                    'sendDataToWXDevice',
                    'onWXDeviceBindStateChange',
                    'onWXDeviceStateChange',
                    'onScanWXDeviceResult',
                    'onReceiveDataFromWXDevice',
                    'onWXDeviceBluetoothStateChange',
                ]
            });
            //alert(""初始化库结束"");
        }

        function my_openWXDeviceLib(res) {
                    var x = 0;
                    mlog(""打开设备返回："" + res.err_msg);
                    if (res.err_msg == 'openWXDeviceLib:ok') {
                        if (res.bluetoothState == 'off') {
                ");
                WriteLiteral(@"            mlog(""未开启蓝牙"", ""亲,使用前请先打开手机蓝牙！"");
                            $(""#lbInfo"").innerHTML = ""1.请打开手机蓝牙"";
                            $(""#lbInfo"").css({ color: ""red"" });
                            x = 1;
                            //isOver();
                        };
                        if (res.bluetoothState == 'unauthorized') {
                            mlog(""出错啦"", ""亲,请授权微信蓝牙功能并打开蓝牙！"");
                            $(""#lbInfo"").html(""1.请授权蓝牙功能"");
                            $(""#lbInfo"").css({ color: ""red"" });
                            x = 1;
                            //isOver();
                        };
                        if (res.bluetoothState == 'on') {
                            //mlog(""太着急啦"",""亲,请查看您的设备是否打开！"");
                            $(""#lbInfo"").html(""1.蓝牙已打开,未找到设备"");
                            $(""#lbInfo"").css({ color: ""red"" });
                            //$(""#lbInfo"").attr((""style"", ""background-color:#000"");
                            x = 0;
                         ");
                WriteLiteral(@"   //isOver();
                        };
                    }
                    else {
                        $(""#lbInfo"").html(""1.微信蓝牙打开失败"");
                        x = 1;
                        mlog(""微信蓝牙状态"", ""亲,请授权微信蓝牙功能并打开蓝牙！"");
                    }


            return x;  //0表示成功 1表示失败
        }
        //打印日志
        function mlog(m) {
            var log = $('#logtext').html();
            log=log+m+'\r\n';
            //log = m;
            $('#logtext').html(log);
        }

        /***************************************************************
         * 显示提示信息
        ***************************************************************/
    </script>
");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1cda6750f09eb037a265f7be62b98ab5b27a5a5814638", async() => {
                WriteLiteral("\n    <h2 style=\"color: white;background-color: green;text-align: center;background-position: center;\">蓝牙设备</h2>\n    <div class=\"page\">\n        <div class=\"bd spacing\">\n            <div class=\"weui_cells weui_cells_form\">\n\n");
                WriteLiteral(@"                <div class=""weui_cell"">
                    <div class=""weui_cell_hd""><label class=""weui_label"">操作日志:  </label></div>
                    <div class=""weui_cell_bd weui_cell_primary"">
                        <textarea id=""logtext"" class=""weui_textarea"" placeholder=""日志"" style=""width:100%;height:200px;""></textarea>
                    </div>
                </div>

            </div>

            <div class=""weui_btn_area weui"">

                <button class=""weui_btn weui_btn weui_btn_warn"" id=""CallGetWXrefresh"">获取设备</button><br>

            </div>
            <div class=""weui_btn_area weui"">

                <button class=""weui_btn weui_btn weui_btn_warn"" id=""connectWXDevice"">连接设备</button><br>

            </div>
            <div class=""weui_btn_area weui"">

                <button class=""weui_btn weui_btn weui_btn_warn"" id=""disconnectWXDevice"">断开连接</button><br>

            </div>
            <div class=""weui_btn_area weui"">
                <button class=""weui_btn weui_btn weui_btn_warn"" id=");
                WriteLiteral("\"CallCloseWXrefresh\">关闭设备</button><br>\n            </div>\n            <div class=\"weui_btn_area weui\">\n                <select id=\"type\">\n                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1cda6750f09eb037a265f7be62b98ab5b27a5a5816430", async() => {
                    WriteLiteral("绑定设备");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\n                    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "1cda6750f09eb037a265f7be62b98ab5b27a5a5817670", async() => {
                    WriteLiteral("解绑设备");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"
                </select>
                <button class=""weui_btn weui_btn weui_btn_warn"" id=""getWXDeviceTicket"">获取凭证</button><br>
            </div>
            <div class=""weui_btn_area weui"">

                <button class=""weui_btn weui_btn weui_btn_warn"" id=""CallSendWXData"">发送数据</button><br>

            </div>
            <div>
                <button class=""weui_btn weui_btn weui_btn_warn"" id=""updateDevice"">更新设备</button><br>
            </div>
        </div>
    </div>


");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\n</html>\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
